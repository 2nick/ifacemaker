// Package user generated with github.com/denisdubovitskiy/ifacemaker, DO NOT EDIT.
package user

type User interface {
	DeepCopy() *model.User
	// IsValid validates the user and returns an error if it isn't configured
	// correctly.
	IsValid() *model.AppError
	// PreSave will set the Id and Username if missing.  It will also fill
	// in the CreateAt, UpdateAt times.  It will also hash the password.  It should
	// be run before saving the user to the db.
	PreSave()
	// PreUpdate should be run before updating the user in the db.
	PreUpdate()
	SetDefaultNotifications()
	UpdateMentionKeysFromUsername(oldUsername string)
	GetMentionKeys() []string
	Patch(patch *model.UserPatch)
	// ToJson convert a User to a json string
	ToJson() string
	// Generate a valid strong etag so the browser can cache the results
	Etag(showFullName bool, showEmail bool) string
	// Remove any private data from the user object
	Sanitize(options map[string]bool)
	// Remove any input data from the user object that is not user controlled
	SanitizeInput(isAdmin bool)
	ClearNonProfileFields()
	SanitizeProfile(options map[string]bool)
	MakeNonNil()
	AddNotifyProp(key string, value string)
	SetCustomStatus(cs *model.CustomStatus)
	ClearCustomStatus()
	GetFullName() string
	GetDisplayName(nameFormat string) string
	GetDisplayNameWithPrefix(nameFormat string, prefix string) string
	GetRoles() []string
	GetRawRoles() string
	// Make sure you acually want to use this function. In context.go there are functions to check permissions
	// This function should not be used to check permissions.
	IsGuest() bool
	IsSystemAdmin() bool
	// Make sure you acually want to use this function. In context.go there are functions to check permissions
	// This function should not be used to check permissions.
	IsInRole(inRole string) bool
	IsSSOUser() bool
	IsOAuthUser() bool
	IsLDAPUser() bool
	IsSAMLUser() bool
	GetPreferredTimezone() string
	// IsRemote returns true if the user belongs to a remote cluster (has RemoteId).
	IsRemote() bool
	// GetRemoteID returns the remote id for this user or "" if not a remote user.
	GetRemoteID() string
	// GetProp fetches a prop value by name.
	GetProp(name string) (string, bool)
	// SetProp sets a prop value by name, creating the map if nil.
	// Not thread safe.
	SetProp(name string, value string)
	ToPatch() *model.UserPatch
	// DecodeMsg implements msgp.Decodable
	DecodeMsg(dc *msgp.Reader) (err error)
	// EncodeMsg implements msgp.Encodable
	EncodeMsg(en *msgp.Writer) (err error)
	// MarshalMsg implements msgp.Marshaler
	MarshalMsg(b []byte) (o []byte, err error)
	// UnmarshalMsg implements msgp.Unmarshaler
	UnmarshalMsg(bts []byte) (o []byte, err error)
	// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
	Msgsize() (s int)
}
